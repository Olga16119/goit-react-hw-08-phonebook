{"version":3,"file":"static/js/794.41bc6df9.chunk.js","mappings":"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","sources":["components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","Views/Contacts/Contacts.jsx","webpack://react-homework-template/./src/Views/Views.module.css?7ce6"],"sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from 'redux/selectors';\nimport { changeFilter } from 'redux/Filter/filterSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const filterChange = event => {\n    dispatch(changeFilter(event.target.value));\n  };\n\n  return (\n    <label>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={filterChange}\n        placeholder=\"Enter name four search\"\n      />{' '}\n      Find contacts\n    </label>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\",\"contactItem\":\"ContactList_contactItem__ppNQ5\"};","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/Contacts/contactsOperation';\nimport css from '../ContactList/ContactList.module.css';\n\nconst ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const onDelete = id => dispatch(deleteContact(id));\n  return (\n    <li id={id} className={css.contactItem}>\n      {name}.........................................{number}\n      <button onClick={() => onDelete(id)}> Delete</button>\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default ContactItem;\n","import ContactItem from 'components/ContactItem/ContactItem';\nimport css from './ContactList.module.css';\nimport { useSelector } from 'react-redux';\nimport {\n  getContacts,\n  getError,\n  getFilter,\n  getIsLoading,\n} from 'redux/selectors';\n\nconst ContactList = () => {\n  const filter = useSelector(getFilter);\n  const contacts = useSelector(getContacts);\n  const error = useSelector(getError);\n  const isLoading = useSelector(getIsLoading);\n\n  const visibleContacts = () => {\n    const filterNormalized = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterNormalized)\n    );\n  };\n\n  return (\n    <>\n      {!isLoading && !error}\n      <ul className={css.contactList}>\n        {visibleContacts().map(({ id, name, number }) => (\n          <ContactItem key={id} id={id} name={name} number={number} />\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default ContactList;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { addContact } from 'redux/Contacts/contactsOperation';\nimport { getContacts } from 'redux/selectors';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const onChangeForm = ({ target }) => {\n    const { name, value } = target;\n    switch (name) {\n      case 'number':\n        setNumber(value);\n        break;\n\n      case 'name':\n        setName(value);\n        break;\n\n      default:\n        throw new Error('Error');\n    }\n  };\n\n  const onSubmitForm = event => {\n    event.preventDefault();\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLocaleLowerCase()\n      ) ||\n      contacts.find(contact => contact.number === number)\n    ) {\n      return alert(` ${name} already is in phonebook`);\n    }\n    const newContact = { name, number };\n    dispatch(addContact(newContact));\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={onSubmitForm}>\n      <input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        placeholder=\"Enter your name\"\n        value={name}\n        onChange={onChangeForm}\n        id={nanoid()}\n        required\n      ></input>\n      <input\n        type=\"tel\"\n        name=\"number\"\n        placeholder=\"Enter your number\"\n        pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        value={number}\n        onChange={onChangeForm}\n        id={nanoid()}\n      />\n      <button>Add</button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getIsLoading } from 'redux/selectors';\nimport { fetchContacts } from 'redux/Contacts/contactsOperation';\nimport Loader from 'components/Loader/Loader';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport css from '../Views.module.css';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div className={css.contactsPage}>\n      <h2>YOUR CONTACTS</h2>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n      {isLoading && <Loader />}\n    </div>\n  );\n};\n\nexport default Contacts;\n","// extracted by mini-css-extract-plugin\nexport default {\"home\":\"Views_home__slhqh\",\"login\":\"Views_login__33g-u\",\"register\":\"Views_register__utdsV\",\"contactsPage\":\"Views_contactsPage__ldccz\"};"],"names":["dispatch","useDispatch","filter","useSelector","getFilter","type","name","value","onChange","event","changeFilter","target","placeholder","id","number","className","css","onClick","deleteContact","onDelete","contacts","getContacts","error","getError","isLoading","getIsLoading","filterNormalized","toLowerCase","contact","includes","visibleContacts","map","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","useState","setName","setNumber","onChangeForm","Error","resetForm","onSubmit","preventDefault","find","toLocaleLowerCase","alert","newContact","addContact","pattern","title","required","useEffect","fetchContacts","Loader"],"sourceRoot":""}